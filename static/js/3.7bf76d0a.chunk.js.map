{"version":3,"sources":["api/mocks/dns/index.ts","api/mocks/ssl/index.ts","api/mocks/system/index.ts","api/mocks/user/index.ts","api/mocks/users/index.ts","api/mocks/web/index.ts","api/mocks/index.ts","api/mockApi.ts"],"names":["dns","get","getDnsSecondaryNameserver","response","post","addDnsSecondaryNameserver","getDnsZones","updateDns","getDnsCustomRecords","getDnsCustomRecordsForQNameAndType","addDnsCustomRecord","put","updateDnsCustomRecord","delete","removeDnsCustomRecord","getDnsCustomARecordsForQName","addDnsCustomARecord","updateDnsCustomARecord","removeDnsCustomARecord","getDnsDump","ssl","getSSLStatus","generateSSLCSR","installSSLCertificate","provisionSSLCertificates","system","getSystemStatus","getSystemVersion","getSystemUpstreamVersion","getSystemUpdates","updateSystemPackages","getSystemPrivacyStatus","updateSystemPrivacy","getSystemRebootStatus","rebootSystem","getSystemBackupStatus","getSystemBackupConfig","updateSystemBackupConfig","user","users","getMailUsers","_url","opts","email","body","privileges","privilegesList","MailUserPrivilege","Empty","domain","split","pop","push","status","MailUserStatus","Active","addMailUser","userDomain","domainObject","find","userIndex","findIndex","splice","length","domainIndex","indexOf","removeMailUser","privilege","index","removeMailUserPrivilege","addMailUserPrivilege","setMailUserPassword","getMailUserPrivileges","getMailDomains","getMailAliases","address","updateIfExists","Number","forwardsTo","permittedSenders","aliasDomain","forwardToList","permittedSendersList","alias","aliases","address_display","forwards_to","permitted_senders","updateMailAlias","required","addMailAlias","aliasIndex","removeMailAlias","web","getWebDomains","updateWeb","mocks","Object","keys","forEach","url","methods","method","data","fetchMock","mock","delay"],"mappings":"2xjFAiBaA,EAAa,CACxB,iCAAkC,CAChCC,IAAKC,EAA0BC,SAC/BC,KAAMC,EAA0BF,UAElC,kBAAmB,CACjBF,IAAKK,EAAYH,UAEnB,mBAAoB,CAClBF,IAAKM,EAAUJ,UAEjB,mBAAoB,CAClBF,IAAKO,EAAoBL,UAE3B,0BAA2B,CACzBF,IAAKQ,EAAmCN,SACxCC,KAAMM,EAAmBP,SACzBQ,IAAKC,EAAsBT,SAC3BU,OAAQC,EAAsBX,UAEhC,mBAAoB,CAClBF,IAAKc,EAA6BZ,SAClCC,KAAMY,EAAoBb,SAC1BQ,IAAKM,EAAuBd,SAC5BU,OAAQK,EAAuBf,UAEjC,iBAAkB,CAChBF,IAAKkB,EAAWhB,W,oCCrCPiB,EAAa,CACxB,oBAAqB,CACnBnB,IAAKoB,EAAalB,UAEpB,iCAAkC,CAChCC,KAAMkB,EAAenB,UAEvB,qBAAsB,CACpBC,KAAMmB,EAAsBpB,UAE9B,uBAAwB,CACtBC,KAAMoB,EAAyBrB,W,4GCHtBsB,EAAgB,CAC3B,sBAAuB,CACrBrB,KAAMsB,EAAgBvB,UAExB,uBAAwB,CACtBF,IAAK0B,EAAiBxB,UAExB,wCAAyC,CACvCC,KAAMwB,EAAyBzB,UAEjC,uBAAwB,CACtBF,IAAK4B,EAAiB1B,UAExB,+BAAgC,CAC9BC,KAAM0B,EAAqB3B,UAE7B,uBAAwB,CACtBF,IAAK8B,EAAuB5B,SAC5BC,KAAM4B,EAAoB7B,UAE5B,sBAAuB,CACrBF,IAAKgC,EAAsB9B,SAC3BC,KAAM8B,EAAa/B,UAErB,6BAA8B,CAC5BF,IAAKkC,EAAsBhC,UAE7B,6BAA8B,CAC5BF,IAAKmC,EAAsBjC,SAC3BC,KAAMiC,EAAyBlC,WCxCtBmC,EAAc,CACzB,WAAY,CACVrC,I,OAAWE,W,mHCWFoC,EAAe,CAC1B,+BAAgC,CAC9BtC,IAAKuC,EAAarC,UAEpB,uBAAwB,CACtBC,KAAM,SAACqC,EAAcC,GACnB,IAAMC,EAASD,EAAKE,KAAyB3C,IAAI,SAC3C4C,EAAcH,EAAKE,KAAyB3C,IAChD,cAEI6C,EACJD,IAAeE,oBAAkBC,MAAQ,GAAK,CAACH,GAC3CI,EAASN,EAAMO,MAAM,KAAKC,MAWhC,OAVAX,EAAarC,SAASiD,KAAK,CACzBH,SACAV,MAAO,CACL,CACEI,QACAE,WAAYC,EACZO,OAAQC,iBAAeC,WAItBC,EAAYrD,WAGvB,0BAA2B,CACzBC,KAAM,SAACqC,EAAcC,GACnB,IAAMC,EAASD,EAAKE,KAAyB3C,IAAI,SAC3CwD,EAAad,EAAMO,MAAM,KAAKC,MAC9BO,EAAelB,EAAarC,SAASwD,MAAK,SAACV,GAC/C,OAAOA,EAAOA,SAAWQ,KAErBG,EAAYF,EAAcnB,MAAMsB,WACpC,SAACvB,GAAD,OAAUA,EAAKK,QAAUA,KAG3B,GADAe,EAAcnB,MAAMuB,OAAOF,EAAW,IACjCF,EAAcnB,MAAMwB,OAAQ,CAC/B,IAAMC,EAAcxB,EAAarC,SAAS8D,QAAQP,GAClDlB,EAAarC,SAAS2D,OAAOE,EAAa,GAE5C,OAAOE,EAAe/D,WAG1B,qCAAsC,CACpCC,KAAM,SAACqC,EAAcC,GACnB,IAAMC,EAASD,EAAKE,KAAyB3C,IAAI,SAC3CkE,EAAazB,EAAKE,KAAyB3C,IAC/C,aAEIwD,EAAad,EAAMO,MAAM,KAAKC,MAI9Bb,EAHeE,EAAarC,SAASwD,MAAK,SAACV,GAC/C,OAAOA,EAAOA,SAAWQ,KAEAlB,MAAMoB,MAAK,SAACrB,GAAD,OAAUA,EAAKK,QAAUA,KACzDyB,EAAS9B,EAAMO,WAAmCoB,QACtDE,GAGF,OADA7B,EAAMO,WAAWiB,OAAOM,EAAO,GACxBC,EAAwBlE,WAGnC,kCAAmC,CACjCC,KAAM,SAACqC,EAAcC,GACnB,IAAMC,EAASD,EAAKE,KAAyB3C,IAAI,SAC3CkE,EAAazB,EAAKE,KAAyB3C,IAC/C,aAEIwD,EAAad,EAAMO,MAAM,KAAKC,MAMpC,OALqBX,EAAarC,SAASwD,MAAK,SAACV,GAC/C,OAAOA,EAAOA,SAAWQ,KAEAlB,MAAMoB,MAAK,SAACrB,GAAD,OAAUA,EAAKK,QAAUA,KACxDE,WAAmCO,KAAKe,GACxCG,EAAqBnE,WAGhC,4BAA6B,CAC3BC,KAAMmE,EAAoBpE,UAE5B,8BAA+B,CAC7BF,IAAKuE,EAAsBrE,UAE7B,qBAAsB,CACpBF,IAAKwE,EAAetE,UAEtB,iCAAkC,CAChCF,IAAKyE,EAAevE,UAEtB,yBAA0B,CACxBC,KAAM,SAACqC,EAAcC,GACnB,IAAMiC,EAAWjC,EAAKE,KAAyB3C,IAAI,WAC7C2E,EAAiBC,OACpBnC,EAAKE,KAAyB3C,IAAI,qBAE/B6E,EAAcpC,EAAKE,KAAyB3C,IAChD,eAEI8E,EAAoBrC,EAAKE,KAAyB3C,IACtD,qBAEI+E,EAAcL,EAAQzB,MAAM,KAAKC,MACnCO,EAAegB,EAAevE,SAASwD,MAAK,SAACV,GAC/C,OAAOA,EAAOA,SAAW+B,KAErBC,EACJH,EAAWb,QAAQ,MAAQ,EACvBa,EAAW5B,MAAM,KACjB4B,EAAW5B,MAAM,MACjBgC,EACJH,EAAiBd,QAAQ,MAAQ,EAC7Bc,EAAiB7B,MAAM,KACvB6B,EAAiB7B,MAAM,MAC7B,GAAI0B,EAAgB,CAClB,IAAMO,EAAQzB,EAAc0B,QAAQzB,MAClC,SAACwB,GAAD,OAAWA,EAAMR,UAAYA,KAQ/B,OANAQ,EAAOR,QAAUA,EACjBQ,EAAOE,gBAAkBV,EACzBQ,EAAOG,YAAcL,EAGrBE,EAAOI,kBAAoBL,EACpBM,EAAgBrF,SAevB,OAbKuD,IACHA,EAAe,CAAET,OAAQ+B,EAAaI,QAAS,IAC/CV,EAAevE,SAASiD,KAAKM,IAE/BA,EAAc0B,QAAQhC,KAAK,CACzBuB,UACAU,gBAAiBV,EACjBW,YAAaL,EAGbM,kBAAmBL,EACnBO,UAAU,IAELC,EAAavF,WAI1B,4BAA6B,CAC3BC,KAAM,SAACqC,EAAcC,GACnB,IAAMiC,EAAWjC,EAAKE,KAAyB3C,IAAI,WAC7CwD,EAAakB,EAAQzB,MAAM,KAAKC,MAChCO,EAAegB,EAAevE,SAASwD,MAAK,SAACV,GACjD,OAAOA,EAAOA,SAAWQ,KAErBkC,EAAajC,EAAc0B,QAAQvB,WACvC,SAACsB,GAAD,OAAWA,EAAMR,UAAYA,KAG/B,GADAjB,EAAc0B,QAAQtB,OAAO6B,EAAY,IACpCjC,EAAc0B,QAAQrB,OAAQ,CACjC,IAAMC,EAAcU,EAAevE,SAAS8D,QAAQP,GACpDgB,EAAevE,SAAS2D,OAAOE,EAAa,GAE9C,OAAO4B,EAAgBzF,Y,mBCzKhB0F,GAAa,CACxB,oBAAqB,CACnB5F,IAAK6F,EAAc3F,UAErB,mBAAoB,CAClBC,KAAM2F,GAAU5F,WCFP6F,GAAY,2EACpBzD,GACAd,GACAzB,GACAoB,GACAyE,IACAvD,GCXL2D,OAAOC,KAAKF,IAAOG,SAAQ,SAACC,GAC1B,IAAMC,EAAUL,GAAMI,GACtBH,OAAOC,KAAKG,GAASF,SAAQ,SAACG,GAC5B,IAAMC,EAAOP,GAAMI,GAAKE,GACxBE,IAAUC,KACR,CACEL,MACAE,SACAI,MAAO,KAETH","file":"static/js/3.7bf76d0a.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { Mocks } from '../types';\nimport addDnsCustomARecord from './data/addDnsCustomARecord.json';\nimport addDnsCustomRecord from './data/addDnsCustomRecord.json';\nimport addDnsSecondaryNameserver from './data/addDnsSecondaryNameserver.json';\nimport getDnsCustomARecordsForQName from './data/getDnsCustomARecordsForQName.json';\nimport getDnsCustomRecords from './data/getDnsCustomRecords.json';\nimport getDnsCustomRecordsForQNameAndType from './data/getDnsCustomRecordsForQNameAndType.json';\nimport getDnsDump from './data/getDnsDump.json';\nimport getDnsSecondaryNameserver from './data/getDnsSecondaryNameserver.json';\nimport getDnsZones from './data/getDnsZones.json';\nimport removeDnsCustomARecord from './data/removeDnsCustomARecord.json';\nimport removeDnsCustomRecord from './data/removeDnsCustomRecord.json';\nimport updateDns from './data/updateDns.json';\nimport updateDnsCustomARecord from './data/updateDnsCustomARecord.json';\nimport updateDnsCustomRecord from './data/updateDnsCustomRecord.json';\n\nexport const dns: Mocks = {\n  'admin/dns/secondary-nameserver': {\n    get: getDnsSecondaryNameserver.response,\n    post: addDnsSecondaryNameserver.response,\n  },\n  'admin/dns/zones': {\n    get: getDnsZones.response,\n  },\n  'admin/dns/update': {\n    get: updateDns.response,\n  },\n  'admin/dns/custom': {\n    get: getDnsCustomRecords.response,\n  },\n  'admin/dns/:qname/:rtype': {\n    get: getDnsCustomRecordsForQNameAndType.response,\n    post: addDnsCustomRecord.response,\n    put: updateDnsCustomRecord.response,\n    delete: removeDnsCustomRecord.response,\n  },\n  'admin/dns/:qname': {\n    get: getDnsCustomARecordsForQName.response,\n    post: addDnsCustomARecord.response,\n    put: updateDnsCustomARecord.response,\n    delete: removeDnsCustomARecord.response,\n  },\n  'admin/dns/dump': {\n    get: getDnsDump.response,\n  },\n};\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { Mocks } from '../types';\nimport generateSSLCSR from './data/generateSSLCSR.json';\nimport getSSLStatus from './data/getSSLStatus.json';\nimport installSSLCertificate from './data/installSSLCertificate.json';\nimport provisionSSLCertificates from './data/provisionSSLCertificates.json';\n\nexport const ssl: Mocks = {\n  '/admin/ssl/status': {\n    get: getSSLStatus.response,\n  },\n  'express:/admin/ssl/csr/:domain': {\n    post: generateSSLCSR.response,\n  },\n  '/admin/ssl/install': {\n    post: installSSLCertificate.response,\n  },\n  '/admin/ssl/provision': {\n    post: provisionSSLCertificates.response,\n  },\n};\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { Mocks } from '../types';\nimport getSystemBackupConfig from './data/getSystemBackupConfig.json';\nimport getSystemBackupStatus from './data/getSystemBackupStatus.json';\nimport getSystemPrivacyStatus from './data/getSystemPrivacyStatus.json';\nimport getSystemRebootStatus from './data/getSystemRebootStatus.json';\nimport getSystemStatus from './data/getSystemStatus.json';\nimport getSystemUpdates from './data/getSystemUpdates.json';\nimport getSystemUpstreamVersion from './data/getSystemUpstreamVersion.json';\nimport getSystemVersion from './data/getSystemVersion.json';\nimport rebootSystem from './data/rebootSystem.json';\nimport updateSystemBackupConfig from './data/updateSystemBackupConfig.json';\nimport updateSystemPackages from './data/updateSystemPackages.json';\nimport updateSystemPrivacy from './data/updateSystemPrivacy.json';\n\nexport const system: Mocks = {\n  'admin/system/status': {\n    post: getSystemStatus.response,\n  },\n  'admin/system/version': {\n    get: getSystemVersion.response,\n  },\n  'admin/system/latest-updstream-version': {\n    post: getSystemUpstreamVersion.response,\n  },\n  'admin/system/updates': {\n    get: getSystemUpdates.response,\n  },\n  'admin/system/update-packages': {\n    post: updateSystemPackages.response,\n  },\n  'admin/system/privacy': {\n    get: getSystemPrivacyStatus.response,\n    post: updateSystemPrivacy.response,\n  },\n  'admin/system/reboot': {\n    get: getSystemRebootStatus.response,\n    post: rebootSystem.response,\n  },\n  'admin/system/backup/status': {\n    get: getSystemBackupStatus.response,\n  },\n  'admin/system/backup/config': {\n    get: getSystemBackupConfig.response,\n    post: updateSystemBackupConfig.response,\n  },\n};\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { Mocks } from '../types';\nimport getMe from './data/getMe.json';\n\nexport const user: Mocks = {\n  'admin/me': {\n    get: getMe.response,\n  },\n};\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { MockRequest, MockResponse } from 'fetch-mock';\nimport { MailUserPrivilege, MailUserStatus } from 'mailinabox-api';\nimport { Mocks } from '../types';\nimport addMailAlias from './data/addMailAlias.json';\nimport addMailUser from './data/addMailUser.json';\nimport addMailUserPrivilege from './data/addMailUserPrivilege.json';\nimport getMailAliases from './data/getMailAliases.json';\nimport getMailDomains from './data/getMailDomains.json';\nimport getMailUserPrivileges from './data/getMailUserPrivileges.json';\nimport getMailUsers from './data/getMailUsers.json';\nimport removeMailAlias from './data/removeMailAlias.json';\nimport removeMailUser from './data/removeMailUser.json';\nimport removeMailUserPrivilege from './data/removeMailUserPrivilege.json';\nimport setMailUserPassword from './data/setMailUserPassword.json';\nimport updateMailAlias from './data/updateMailAlias.json';\n\nexport const users: Mocks = {\n  'admin/mail/users?format=json': {\n    get: getMailUsers.response,\n  },\n  'admin/mail/users/add': {\n    post: (_url: string, opts: MockRequest): MockResponse => {\n      const email = (opts.body as URLSearchParams).get('email') as string;\n      const privileges = (opts.body as URLSearchParams).get(\n        'privileges'\n      ) as string;\n      const privilegesList =\n        privileges === MailUserPrivilege.Empty ? [] : [privileges];\n      const domain = email.split('@').pop() as string;\n      getMailUsers.response.push({\n        domain,\n        users: [\n          {\n            email,\n            privileges: privilegesList,\n            status: MailUserStatus.Active,\n          },\n        ],\n      });\n      return addMailUser.response;\n    },\n  },\n  'admin/mail/users/remove': {\n    post: (_url: string, opts: MockRequest): MockResponse => {\n      const email = (opts.body as URLSearchParams).get('email') as string;\n      const userDomain = email.split('@').pop() as string;\n      const domainObject = getMailUsers.response.find((domain) => {\n        return domain.domain === userDomain;\n      });\n      const userIndex = domainObject!.users.findIndex(\n        (user) => user.email === email\n      );\n      domainObject!.users.splice(userIndex, 1);\n      if (!domainObject!.users.length) {\n        const domainIndex = getMailUsers.response.indexOf(domainObject!);\n        getMailUsers.response.splice(domainIndex, 1);\n      }\n      return removeMailUser.response;\n    },\n  },\n  'admin/mail/users/privileges/remove': {\n    post: (_url: string, opts: MockRequest): MockResponse => {\n      const email = (opts.body as URLSearchParams).get('email') as string;\n      const privilege = (opts.body as URLSearchParams).get(\n        'privilege'\n      ) as MailUserPrivilege;\n      const userDomain = email.split('@').pop() as string;\n      const domainObject = getMailUsers.response.find((domain) => {\n        return domain.domain === userDomain;\n      });\n      const user = domainObject!.users.find((user) => user.email === email);\n      const index = (user!.privileges as MailUserPrivilege[]).indexOf(\n        privilege\n      );\n      user!.privileges.splice(index, 1);\n      return removeMailUserPrivilege.response;\n    },\n  },\n  'admin/mail/users/privileges/add': {\n    post: (_url: string, opts: MockRequest): MockResponse => {\n      const email = (opts.body as URLSearchParams).get('email') as string;\n      const privilege = (opts.body as URLSearchParams).get(\n        'privilege'\n      ) as MailUserPrivilege;\n      const userDomain = email.split('@').pop() as string;\n      const domainObject = getMailUsers.response.find((domain) => {\n        return domain.domain === userDomain;\n      });\n      const user = domainObject!.users.find((user) => user.email === email);\n      (user!.privileges as MailUserPrivilege[]).push(privilege);\n      return addMailUserPrivilege.response;\n    },\n  },\n  'admin/mail/users/password': {\n    post: setMailUserPassword.response,\n  },\n  'admin/mail/users/privileges': {\n    get: getMailUserPrivileges.response,\n  },\n  'admin/mail/domains': {\n    get: getMailDomains.response,\n  },\n  'admin/mail/aliases?format=json': {\n    get: getMailAliases.response,\n  },\n  'admin/mail/aliases/add': {\n    post: (_url: string, opts: MockRequest): MockResponse => {\n      const address = (opts.body as URLSearchParams).get('address') as string;\n      const updateIfExists = Number(\n        (opts.body as URLSearchParams).get('update_if_exists')\n      );\n      const forwardsTo = (opts.body as URLSearchParams).get(\n        'forwards_to'\n      ) as string;\n      const permittedSenders = (opts.body as URLSearchParams).get(\n        'permitted_senders'\n      ) as string;\n      const aliasDomain = address.split('@').pop() as string;\n      let domainObject = getMailAliases.response.find((domain) => {\n        return domain.domain === aliasDomain;\n      });\n      const forwardToList =\n        forwardsTo.indexOf(',') > -1\n          ? forwardsTo.split(',')\n          : forwardsTo.split('\\n');\n      const permittedSendersList =\n        permittedSenders.indexOf(',') > -1\n          ? permittedSenders.split(',')\n          : permittedSenders.split('\\n');\n      if (updateIfExists) {\n        const alias = domainObject!.aliases.find(\n          (alias) => alias.address === address\n        );\n        alias!.address = address;\n        alias!.address_display = address;\n        alias!.forwards_to = forwardToList;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        alias!.permitted_senders = permittedSendersList;\n        return updateMailAlias.response;\n      } else {\n        if (!domainObject) {\n          domainObject = { domain: aliasDomain, aliases: [] };\n          getMailAliases.response.push(domainObject);\n        }\n        domainObject!.aliases.push({\n          address,\n          address_display: address,\n          forwards_to: forwardToList,\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          permitted_senders: permittedSendersList,\n          required: true,\n        });\n        return addMailAlias.response;\n      }\n    },\n  },\n  'admin/mail/aliases/remove': {\n    post: (_url: string, opts: MockRequest): MockResponse => {\n      const address = (opts.body as URLSearchParams).get('address') as string;\n      const userDomain = address.split('@').pop() as string;\n      const domainObject = getMailAliases.response.find((domain) => {\n        return domain.domain === userDomain;\n      });\n      const aliasIndex = domainObject!.aliases.findIndex(\n        (alias) => alias.address === address\n      );\n      domainObject!.aliases.splice(aliasIndex, 1);\n      if (!domainObject!.aliases.length) {\n        const domainIndex = getMailAliases.response.indexOf(domainObject!);\n        getMailAliases.response.splice(domainIndex, 1);\n      }\n      return removeMailAlias.response;\n    },\n  },\n};\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { Mocks } from '../types';\nimport getWebDomains from './data/getWebDomains.json';\nimport updateWeb from './data/updateWeb.json';\n\nexport const web: Mocks = {\n  'admin/web/domains': {\n    get: getWebDomains.response,\n  },\n  'admin/web/update': {\n    post: updateWeb.response,\n  },\n};\n","import { dns } from './dns';\nimport { ssl } from './ssl';\nimport { system } from './system';\nimport { Mocks } from './types';\nimport { user } from './user';\nimport { users } from './users';\nimport { web } from './web';\n\nexport const mocks: Mocks = {\n  ...users,\n  ...system,\n  ...dns,\n  ...ssl,\n  ...web,\n  ...user,\n};\n","import fetchMock from 'fetch-mock';\nimport { mocks } from './mocks';\n\nObject.keys(mocks).forEach((url) => {\n  const methods = mocks[url];\n  Object.keys(methods).forEach((method) => {\n    const data = mocks[url][method];\n    fetchMock.mock(\n      {\n        url,\n        method,\n        delay: 500,\n      },\n      data\n    );\n  });\n});\n"],"sourceRoot":""}